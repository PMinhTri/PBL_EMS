// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  password    String
  fullName    String?
  firstName   String?
  lastName    String?
  gender      String?
  dateOfBirth DateTime?
  phoneNumber String?
  address     String?
  city        String?
  citizenId   String?
  nationality String?
  status      String?
  education   Education?

  roleId Int
  role   Role    @relation(fields: [roleId], references: [id])
  avatar String?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  jobInformation JobInformation?
  timeKeeping    TimeSheet[]
  Payroll        Payroll[]
  HealthCare     Insurance?
  Leaves         Leaves[]
  educationId    Int?
}

model JobInformation {
  id                Int            @id @default(autoincrement())
  userId            Int            @unique
  user              User           @relation(fields: [userId], references: [id])
  contractType      String?
  contractStartDate DateTime?
  contractEndDate   DateTime?
  joinDate          DateTime?
  employeeStatus    String?
  jobHistory        String?
  jobTitleId        Int?           @unique
  jobTitle          JobTitle?      @relation(fields: [jobTitleId], references: [id])
  workingSkill      WorkingSkill[]
  departmentId      Int?           @unique
  department        Department?    @relation(fields: [departmentId], references: [id])
  project           Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobTitle {
  id             Int              @id @default(autoincrement())
  name           String
  JobInformation JobInformation[]
}

model WorkingSkill {
  id             Int              @id @default(autoincrement())
  name           String
  jobInformation JobInformation[]
}

model Department {
  id             Int              @id @default(autoincrement())
  name           String
  JobInformation JobInformation[]
}

model TimeSheet {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  checkIn     DateTime?
  checkOut    DateTime?
  hoursWorked Float?
  otHours     Float?
  status      String?
  year        Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payroll {
  id          Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  month       Int?
  year        Int?
  basicSalary Float?
  totalSalary Float?
  additional  Float?
  status      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  progress       String?
  status         String?
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  jobInformation JobInformation[]
}

model Insurance {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id])
  insuranceId     Int
  provideDate     DateTime
  expiredDate     DateTime
  provideLocation String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Leaves {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  session   String
  status    String
  leaveType String
  leaveDays Float
  startDate DateTime
  endDate   DateTime
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveTypes {
  id      Int    @id @default(autoincrement())
  name    String
  balance Float
}

model Education {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id])
  grade       String?
  university  String?
  major       String?
  certificate String?
  degree      String?
}
